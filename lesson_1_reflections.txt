Q1: How did viewing a diff between two versions of a file help you see the bug that was introduced?

Viewing a diff is effective because only relevant lines of code are shown.
It saves time by allowing you to disregard lines of code that haven't changed,
and are therefore irrelevant.

Q2: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It can allow you to easily revert to working, old code.  If you make a change 
that breaks things, it makes it easier to identify the culprit.

Q3: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros - you can commit changes at logical checkpoints
Cons - if you forget to commit, you may lose your changes or have commits that include too many changes.

Q4: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git is used to track code, which may have files with interdependencies.  Google Docs does not really allow interdependence between files -- each is stand-alone.

Q5: How can you use the commands git log and git diff to view the history of files?

"git log" gives a summary of the changes made in each commit.
"git diff" is used to compare two versions of the same file.

Q6: How might using version control make you more confident to make changes that could break something?

It is very easy to revert back to a working version.

Q7: Now that you have your workspace set up, what do you want to try using Git for?

Use it in another Udacity class.